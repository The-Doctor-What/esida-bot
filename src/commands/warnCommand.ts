import {checkUser, getFraction, saveUser} from "../database";
import moment from "moment";
import {vkGroup} from "../bots";
import {getGender, messageSend} from "../others/utils";
import {addHistory} from "./historyCommand";
import dedent from "dedent-js";

moment.locale('ru')

export async function setWarn(msg, args, sender) {
    await setData(msg, args, sender, {tag: "warns", name: "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"})
}

export async function setVig(msg, args, sender) {
    await setData(msg, args, sender, {tag: "vigs", name: "–≤—ã–≥–æ–≤–æ—Ä–æ–≤"})
}

export async function setFWarn(msg, args, sender) {
    await setData(msg, args, sender, {tag: "fwarns", name: "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–≥–æ–≤–æ—Ä–æ–≤"})
}

export async function setDays(msg, args, sender) {
    await setData(msg, args, sender, {tag: "term", name: "–¥–Ω–µ–π –∫ —Å—Ä–æ–∫—É"})
}

export async function setScore(msg, args, sender) {
    await setData(msg, args, sender, {tag: "score", name: "–±–∞–ª–ª–æ–≤"})
}

export async function setLitrbol(msg, args, sender) {
    await setData(msg, args, sender, {tag: "litrbol", name: "–æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∞–ª–ª–ª–æ–≤"})
}

export async function setRep(msg, args, sender) {
    await setData(msg, args, sender, {tag: "rep", name: "—Ä–µ–ø—É—Ç–∞—Ü–∏–∏"})
}

export async function setData(msg, args, sender, type = {tag: "warns", name: "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"}) {
    let [action, actionText] = ["set", "–£—Å—Ç–∞–Ω–æ–≤–∏–ª"]
    if (args[1].startsWith("+")) [action, actionText] = ["+", "–í—ã–¥–∞–ª"]
    else if (args[1].startsWith("-")) [action, actionText] = ["-", "–°–Ω—è–ª"]

    const count = Math.abs(parseInt(args[1]))
    if (isNaN(count)) return await msg.send("üö´ –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ! üö´")

    const reason = args.slice(2).join(" ")
    const time = moment()

    const user = await checkUser(msg, args[0], sender, false)
    if (!user) return
    if (user.access >= sender.access) return await msg.send(`üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∂–µ –∏–ª–∏ –±–æ–ª—å—à–∏–º —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞! üö´`)
    if (action == "set") user[type.tag] = count
    else if (action == "+") user[type.tag] += count
    else if (action == "-") user[type.tag] -= count
    if (type.tag == "score" && action == "+") user.litrbol += count
    await addHistory(user, type.tag, count, reason, action, sender.vk_id)

    const text = dedent`
        ${sender.rank} @id${msg.senderId}(${sender.nick})
        
        üîπ ${actionText}${await getGender(msg.senderId)} ${count} ${type.name}
        ${await checkData(user)}
        üî∏ –ü—Ä–∏—á–∏–Ω–∞: ${reason}
        üî∏ –í—Ä–µ–º—è: ${time.format("DD.MM.YYYY HH:mm:ss")}
        üî∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: @id${user.vk_id} (${user.nick})`

    await saveUser(user)
    await msg.send({message: text, disable_mentions: 1, dont_parse_links: 1})
    const chat = await getFraction(user.frac, "chat")
    if (user.access < 5 && chat != msg.chatId) await messageSend(text, chat, vkGroup)
}

export async function checkScores(user, limit) {
    user.score = limit
    await addHistory(user, "score", limit, `–ë–æ–ª—å—à–µ ${limit} –±–∞–ª–ª–æ–≤`, "set")
    return `üîπ –≠–≤–µ–ª–∏–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ ${limit} –±–∞–ª–ª–æ–≤ (–õ–∏–º–∏—Ç –±–∞–ª–ª–æ–≤)\n`
}

export async function checkWarns(user, mode, count = 3, name = "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", _name = "–≤—ã–≥–æ–≤–æ—Ä", type = "warns", _type = "vigs") {
    if (mode == 1) {
        user[type] -= count
        user[_type] += 1
        await addHistory(user, type, count, `${count}/${count} ${name}`, "-")
        await addHistory(user, _type, count, `${count}/${count} ${name}`, "+")
        return `üîπ –≠–≤–µ–ª–∏–Ω–∞ —Å–Ω—è–ª–∞ ${count} ${name} –∏ –≤—ã–¥–∞–ª–∞ ${_name} (${count}/${count} ${name})\n`
    } else {
        user[type] += count
        user[_type] -= 1
        await addHistory(user, type, count, `-1/${count} ${name}`, "+")
        await addHistory(user, _type, count, `-1/${count} ${name} `, "-")
        return `üîπ –≠–≤–µ–ª–∏–Ω–∞ –≤—ã–¥–∞–ª–∞ ${count} ${name} –∏ —Å–Ω—è–ª–∞ ${_name} (-1/${count} ${name})\n`
    }
}

export async function checkData(user) {
    let text = ``
    while (true) {
        if (user.access < 5) {
            if (user.warns >= 3) text += await checkWarns(user, 1)
            else if (user.warns <= -1 && user.vigs >= 1) text += await checkWarns(user, 2)
            else if (user.fwarns >= 2) text += await checkWarns(user, 1, 2, "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–≥–æ–≤–æ—Ä–æ–≤", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "fwarns", "warns")
            else if (user.fwarns <= -1) text += await checkWarns(user, 2, 2, "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–≥–æ–≤–æ—Ä–æ–≤", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "fwarns", "warns")
            else if (user.vigs <= -1) text += await checkWarns(user, 2, 3, "–≤—ã–≥–æ–≤–æ—Ä–æ–≤", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "vigs", "warns")
            else if (user.score > 70 && user.access == 1) text += await checkScores(user, 70)
            else if (user.score > 140 && (user.access == 3 || (user.frac == 6 && user.access == 3))) text += await checkScores(user, 140)
            else if (user.score > 160 && user.access == 4 && user.frac != 6) text += await checkScores(user, 160)
            else break
        } else break
    }
    return text
}