import {checkUser, getFraction, saveUser} from "../database";
import moment from "moment";
import {vkGroup} from "../bots";
import {addHistory} from "./commandHistory";
import {getGender} from "../others/utils";

moment.locale('ru')

export async function setWarn(msg, args, sender) {
    await setData(msg, args, sender, {tag: "warns", name: "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"})
}

export async function setVig(msg, args, sender) {
    await setData(msg, args, sender, {tag: "vigs", name: "–≤—ã–≥–æ–≤–æ—Ä–æ–≤"})
}

export async function setFWarn(msg, args, sender) {
    await setData(msg, args, sender, {tag: "fwarns", name: "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–≥–æ–≤–æ—Ä–æ–≤"})
}

export async function setDays(msg, args, sender) {
    await setData(msg, args, sender, {tag: "term", name: "–¥–Ω–µ–π –∫ —Å—Ä–æ–∫—É"})
}

export async function setScore(msg, args, sender) {
    await setData(msg, args, sender, {tag: "score", name: "–±–∞–ª–ª–æ–≤"})
}

export async function setLitrbol(msg, args, sender) {
    await setData(msg, args, sender, {tag: "litrbol", name: "–æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∞–ª–ª–ª–æ–≤"})
}

export async function setRep(msg, args, sender) {
    await setData(msg, args, sender, {tag: "rep", name: "—Ä–µ–ø—É—Ç–∞—Ü–∏–∏"})
}

export async function setData(msg, args, sender, type = {tag: "warns", name: "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"}) {
    let action = "set"
    if (args[1].startsWith("+")) action = "+"
    else if (args[1].startsWith("-")) action = "-"
    let count = args[1].replace(/[^0-9]/g, "")
    count = parseInt(count)
    if(!count) return msg.send("üö´ –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ! üö´")
    let reason = args.slice(2).join(" ")
    let time = moment()
    let data = await checkUser(msg, args[0], sender, false)
    if (!data) return
    let text = `${sender.rank} @id${msg.senderId}(${sender.nick})\n\n`
    let actionText = "–£—Å—Ç–∞–Ω–æ–≤–∏–ª"
    if (action == "+") actionText = "–í—ã–¥–∞–ª"
    else if (action == "-") actionText = "–°–Ω—è–ª"
    if (data.access >= sender.access) return msg.send(`üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∂–µ –∏–ª–∏ –±–æ–ª—å—à–∏–º —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞! üö´`)
    text += `üîπ ${actionText}${await getGender(msg.senderId)} ${count} ${type.name}\n`
    if (type.tag == "score" && action == "+") {
        data.litrbol += count
    }
    if (action == "set") data[type.tag] = count
    else if (action == "+") data[type.tag] += count
    else if (action == "-") data[type.tag] -= count
    await addHistory(data, type.tag, count, reason, action, sender.vk_id)
    text += await checkData(data)
    text += `üî∏ –ü—Ä–∏—á–∏–Ω–∞: ${reason}\nüî∏ –í—Ä–µ–º—è: ${time.format("DD.MM.YYYY HH:mm:ss")}\nüî∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: @id${data.vk_id} (${data.nick})\n\n`
    await saveUser(data)
    msg.send({message: text, disable_mentions: 1, dont_parse_links: 1})
    let chat = await getFraction(data.frac, "chat")
    if (data.access < 5 && chat != msg.chatId) await vkGroup.api.messages.send({chat_id: chat, message: text, dont_parse_links: 1, disable_mentions: 1, random_id: 0})
}

export async function checkScores(data, limit) {
    data.score = limit
    await addHistory(data, "score", limit, `–ë–æ–ª—å—à–µ ${limit} –±–∞–ª–ª–æ–≤`, "set")
    await saveUser(data)
    return `üîπ –≠–≤–µ–ª–∏–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ ${limit} –±–∞–ª–ª–æ–≤ (–õ–∏–º–∏—Ç –±–∞–ª–ª–æ–≤)\n`
}

export async function checkWarns(data, mode, count = 3, name = "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", _name = "–≤—ã–≥–æ–≤–æ—Ä", type = "warns", _type = "vigs") {
    if (mode == 1) {
        data[type] -= count
        data[_type] += 1
        await addHistory(data, type, count, `${count}/${count} ${name}`, "-")
        await addHistory(data, _type, count, `${count}/${count} ${name}`, "+")
        await saveUser(data)
        return `üîπ –≠–≤–µ–ª–∏–Ω–∞ —Å–Ω—è–ª–∞ ${count} ${name} –∏ –≤—ã–¥–∞–ª–∞ ${_name} (${count}/${count} ${name})\n`
    } else {
        data[type] += count
        data[_type] -= 1
        await addHistory(data, type, count, `-1/${count} ${name}`, "+")
        await addHistory(data, _type, count, `-1/${count} ${name} `, "-")
        await saveUser(data)
        return `üîπ –≠–≤–µ–ª–∏–Ω–∞ –≤—ã–¥–∞–ª–∞ ${count} ${name} –∏ —Å–Ω—è–ª–∞ ${_name} (-1/${count} ${name})\n`
    }
}

export async function checkData(data) {
    let text = ``
    while (true) {
        if (data.access < 5) {
            if (data.warns >= 3) text += await checkWarns(data, 1)
            else if (data.warns <= -1 && data.vigs >= 1) text += await checkWarns(data, 2)
            else if (data.fwarns >= 2) text += await checkWarns(data, 1, 2, "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–≥–æ–≤–æ—Ä–æ–≤", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "fwarns", "warns")
            else if (data.fwarns <= -1) text += await checkWarns(data, 2, 2, "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–≥–æ–≤–æ—Ä–æ–≤", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "fwarns", "warns")
            else if (data.vigs <= -1) text += await checkWarns(data, 2, 3, "–≤—ã–≥–æ–≤–æ—Ä–æ–≤", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "vigs", "warns")
            else if (data.score > 70 && data.access == 1) text += await checkScores(data, 70)
            else if (data.score > 140 && (data.access == 3 || (data.frac == 6 && data.access == 3))) text += await checkScores(data, 140)
            else if (data.score > 160 && data.access == 4 && data.frac != 6) text += await checkScores(data, 160)
            else break
        } else break
    }
    await saveUser(data)
    return text
}