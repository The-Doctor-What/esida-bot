import {createClient} from "@supabase/supabase-js";
import {request} from "./aliensAPI";
import {helpJustall} from "./helpTexts";
const supabaseJA = createClient(process.env.SUPABASE_URL_JA, process.env.SUPABASE_TOKEN_JA)

async function justallReloadCommand(msg) {
    await justallReload()
    await msg.send("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö JustAll –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
}

export async function justallReload() {
    await request('https://justall.studio/api/refresh?token=' + process.env.AUTHOR_TOKEN).then((data) => {
        if (data.revalidated) console.log("Logs ¬ª –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö JustAll –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else console.log("Logs ¬ª –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö JustAll!")
    })
}

export async function justallCommand(msg) {
    if (msg.text.split(' ').length < 2) {
        return await msg.send({message: helpJustall, dont_parse_links: true})}
    let command = msg.text.split(' ')[1]
    let args = msg.text.split(' ').slice(2)
    let checkCommand = {
        "reload": justallReloadCommand,
        "add": justallAdd,
        "delete": justallDelete,
        "connect" : justallConnect,
        "disconnect" : justallDisconnect,
        "tags" : justallTags,
        "projects" : justallProjects,
    }
    if (checkCommand[command]) {
        await checkCommand[command](msg, args)
    }
    else {
        await msg.send({message: helpJustall, dont_parse_links: true})
    }
}

async function justallDelete(msg, args) {
    let id = args[0].trim()
    const {error} = await supabaseJA
        .from("projects")
        .delete()
        .match({id: id})
    if (error) {
        console.error(`Logs ¬ª –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç —Å id ${id}!`)
        console.error(error)
        await msg.send(`üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç —Å id ${id}!`)
    }
    else {
        console.log(`Logs ¬ª –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å id ${id} –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!`)
        await msg.send(`‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å id ${id} –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!`)
        await justallReload()
    }
}

async function justallAdd(msg) {
    let name = msg.text.split('–ù–∞–∑–≤–∞–Ω–∏–µ: ')[1].split('\n')[0].trim()
    if (!name) return await msg.send('üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è üö´')
    let link = msg.text.split('–°—Å—ã–ª–∫–∞: ')[1].split('\n')[0].trim()
    if (!link) return await msg.send('üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É üö´')
    let description = msg.text.split('–û–ø–∏—Å–∞–Ω–∏–µ: ')[1].split('\n')[0].trim()
    if (!description) return await msg.send('üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ üö´')
    let icon = msg.text.split('–ò–∫–æ–Ω–∫–∞: ')[1].split('\n')[0].trim()
    if (!icon) return await msg.send('üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É üö´')
    let tags = msg.text.split('–¢–µ–≥–∏: ')[1].split('\n')[0]
    if (!tags) return await msg.send('üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–µ–≥–∏ üö´')
    tags = tags.trim().split(',').map(t => Number(t.trim()))

    const {error} = await supabaseJA
        .from("projects")
        .insert({
            title: name,
            description: description,
            url: link,
            icon: icon,
            tags: tags
        })
    if (error) {
        console.error(`Logs ¬ª –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç "${name}"!`)
        console.error(error)
        await msg.send(`üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç "${name}"!`)
    }
    else {
        console.log(`Logs ¬ª –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ "${name}" –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!`)
        await msg.send(`‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ "${name}" –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!`)
        await justallReload()
    }
}

async function justallConnect(msg, args) {
    let icon = args[0]
    let url = args[1]

    const {error} = await supabaseJA
        .from("socials")
        .insert({
            icon: icon,
            url: url
        })
    if (error) {
        console.error(`Logs ¬ª –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–≤—É—é —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å!`)
        console.error(error)
        await msg.send(`üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–≤—É—é —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å!`)
    }
    else {
        console.log(`Logs ¬ª –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!`)
        await msg.send(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!`)
        await justallReload()
    }
}

async function justallDisconnect(msg, args) {
    let url = args[0]

    const {error} = await supabaseJA
        .from("socials")
        .delete()
        .match({url: url})
    if (error) {
        console.error(`Logs ¬ª –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å!`)
        console.error(error)
        await msg.send(`üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å!`)
    }
    else {
        console.log(`Logs ¬ª –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!`)
        await msg.send(`‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!`)
        await justallReload()
    }
}

async function justallTags(msg) {
    await supabaseJA
        .from("project_tags")
        .select("*")
        .then(({data, error}) => {
            if (error) {
                console.error(`Logs ¬ª –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤!`)
                console.error(error)
                msg.send(`üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤!`)
            } else {
                let tags = data.map(t => `ID: ${t.id} | –ù–∞–∑–≤–∞–Ω–∏–µ: ${t.name}`).join('\n')
                msg.send(`üìã –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:\n${tags}`)
            }
        })
}

async function justallProjects(msg) {
    await supabaseJA
        .from("projects")
        .select("*")
        .then(({data, error}) => {
            if (error) {
                console.error(`Logs ¬ª –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤!`)
                console.error(error)
                msg.send(`üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤!`)
            } else {
                let projects = data.map(p => `ID: ${p.id} | –ù–∞–∑–≤–∞–Ω–∏–µ: ${p.title}`).join('\n')
                msg.send(`üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:\n${projects}`)
            }
        })
}